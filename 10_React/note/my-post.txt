간단한 포스트 만들기
- 새로운 리액트 앱 생성
  - npx create-react-app my-post
  - cd my-post
  - npm start

* (오류) 'react-scripts'은(는) 내부 또는 외부 명령, 실행할 수 있는 프로그램, 또는
배치 파일이 아닙니다.
(해결) npm update

* js -> {}안에 코드 작성

* 어떤 것을 컴포넌트로 만들 것인가?
1. 반복적인 HTML이 발생할 때
2. 큰 페이지들(컴포넌트로 이루어짐)
3. 여기저기 자주 출현하는 것들(재사용을 위해) -> button, modal
  but, 컴포넌트로 너무 쪼개는 것도 안좋음!

* 배열이나 객체의 state 변경할때 주의!
1. state 변경 함수의 특징
  기존 state가 신규 state랑 같은 경우, 변경 안함
2. 배열/객체의 특징
  변수에 주소(참조)값이 저장됨

* set함수 인자 전달할 때 새로운 객체로 전달(복사본 수정해서 사용)

#0602
* 왜 새로고침하면 다 없어질까..?
새로고침 시 HTML/CSS/JS 파일을 다시 읽어옴
데이터를 유지하려면 서버에 보내서 DB에 영구 저장하고
새로고침 발생 시 DB에서 다시 읽어오면 됨

==============================================================

#0601
[포스트 목록]
=> map()으로 posts 반복 출력
- posts 배열을 map()함수로 배열의 각 요소에 어떤 처리를 한 뒤 리턴하는 것으로 새로운 배열 만듦
- return!! 하는 것으로 새로운 배열을 만들기 때문에 return 꼭 해줘야 함
↓
배열이 담긴 변수.map((currentValue, index) => {
  return (화면에 보여줄 코드);
})

[좋아요 기능 만들기]
- 이벤트 버블링 발생
  span 클릭하면 부모 div도 클릭됨(클릭 이벤트 동작됨)
  -> 상위 요소로 퍼지는 이벤트 버블링 막는 법
    e.stopPropagation();

★★★[포스트 등록하기]★★★
=> 제목 입력 후 등록 버튼 누르면 맨 앞에 새로운 포스트 추가 
↓
1. 제어 컴포넌트로 만들어서 사용자가 입력한 값을 state로 저장해서 관리
  input태그에 value 속성에 state로 받아와서 사용
    1. useState 만들기
      const [inputValue, setInputValue] = useState('');

    2. set함수로 이벤트 발생 시 value값으로 state 값 변경
      const handleChagneInputValue = (e) => {
        setInputValue(e.target.value);
      }

2. 등록 버튼 클릭 시 posts 상태에 맨 앞에 새로운 데이터 추가
  * 배열 앞에 데이터 추가 메소드 .unshift()

  - button태그에 onClick 속성에서 새로운 데이터와 기존 posts가 있는 새로운 배열 생성하기
    const copyPost = [inputValue,...posts];

  - 포스트 목록을 처리하는 set함수 인자로 새로운 배열 전달
    setPosts(copyPost);

  - input태그에 입력된 값은 포스트 목록에 올린 다음 state 초기화
    setInputValue('');

  - 포스트 하나 추가 시 좋아요 카운트도 같이 추가
    const copyLikeCount = [0, ...likeCount];
    setLikeCount(copyLikeCount);



[포스트 삭제하기]
=> 삭제 누르면 해당 포스트 삭제
* 배열에서 요소 삭제하는 메소드 .splice(index, howMany)

=> 포스트 삭제 시 좋아요 카운트도 같이 삭제
  (posts와 likeCount)
  - span태그에 onClick 속성에서 기존 배열 복사하여 새로운 배열 생성
  - 배열 요소 삭제하는 메소드 사용하여 포스트 삭제
  - 포스트 목록을 처리하는 set함수 인자로 새로운 배열 전달

=>(OR) 배열의 filter() 함수 사용
  기존 배열 변경하지 않고 새로운 배열 반환
  return 조건;


[포스트 상세보기]
=> state 상태를 통해 component 보여짐 여부 판단하여 출력
↓
상태(true/false) && <component/>
  false: false 반환 - 빈 화면
  true: component 반환 - component

=> props로 포스트 목록에서 제목 받아와서 포스트 상세보기 제목에 출력
↓
props 넘길때
<PostDetail posts={posts} currentIndex={currentIndex}/>
props 받을때
const {posts, currentIndex} = props;
<h4>제목: {posts[currentIndex]}</h4>

[간단한 포스트 수정하기]
=> 배열의 state 변경
↓
새로운 배열을 만들어서 set함수에 넣어줘야 함
  새로운 배열: 기존 배열의 복사본(새로운 변수에 스프레드 연산자 사용)

TODO
<추가 개선 과제>
1. PostListItem 컴포넌트 추출 (end)
↓
#0602
(오류)
PostListItem component 자체를 잘못 만들었음
App.js에서 posts 반복 출력해주는 map()함수에 return에 오는 걸 PostListItem으로 만들어줘야함!!

↓
(오류 수정)

#0604
2. 날짜 및 작성자, 좋아요 수 등 데이터를 문자열이 아닌 객체 형태로 처리해보기 (end)
state에 글 제목만 저장되어 있는게 아니라 날짜같은 것도 저장해두고 보여주는 식이면 굿
글 등록 시 현재 날짜까지 같이 저장되도록 하면 나이스
↓
하드코딩으로 저장되어있던 데이터들 객체 형태로 수정
↓
포스트 등록 시 데이터들 가져오도록 제목뿐만 아니라 날짜, 작성자를 입력받아야
현재 날짜로 저장 new Date() 내장 객체 사용
↓
작성자 일단 input으로 제목과 함께 입력 받음(기본값: quest)
↓
#0605
좋아요 수도 객체로 처리

3. input에 아무것도 입력안하고 등록 버튼 누르는거 막기 (end)
유저의 의도치않은 행동을 막는 코드도 많이 짜야 안전한 사이트가 됨 1) or 2)
1) 미입력시 비활성화(state만들어서 true/false) -> 입력이 생기면 버튼 활성화
2) 등록 버튼 누를 시 유효성 검사
#0603
(완료)
↓
(추가)
포스트 등록하면 버튼 다시 비활성화되도록
입력하다가 다 빈 문자열이 되어도 버튼 다시 비활성화되도록

#0604
4. 포스트 수정할 때 input으로 입력받은 내용으로 수정해보기
↓
수정하기 버튼 누르면 제목 input 입력 받도록 하면서 수정하기 버튼 확인 버튼으로 바뀌게
↓
확인 버튼 눌렀을때 포스트 수정되도록

(오류)
input 입력 안됨..
↓
#0605
(오류 수정)



5. 글 오름차순 정렬

6. 그 외 개선 및 구현할 것 많으니 자유롭게 연습

