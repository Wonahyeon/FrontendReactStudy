#0523
[리액트 시작]
- 새로운 package 만들었을 때(또는 협업 시)
  git pull -> npm install
* npm 사용 시 경로 중요 (package.json 파일 있어야 됨)
- npx create-react-app <project-name>
- npm start

[JSX 문법]
- 태그 열었으면 무조건 닫아야 함
- 여러 개 태그 사용 시 하나의 부모 태그 필요
  <></> : React.Fragment
- JSX내 자바스크립트 변수나 함수 사용 시
  {} 필요



#0524
[JSX 문법]
- 인라인 스타일 객체 형태로 작성
- 속성명 카멜 케이스 사용
  예: backgroundColor
- css 파일 연결
  import '파일 경로';
- class값 설정 시 class="" 아닌
  className=""
- JSX내 주석 사용 방법 ctrl + /
  {/* 이런 형태 */}

[컴포넌트1]
- 파일명 파스칼 케이스 사용(대문자로 시작해야)
  예: Book
- 리액트 '함수' 컴포넌트
- 리액트 엘리먼트를 반환
- 완성 후 내보내기!!! -> 다른 곳에서 사용하려면 꼭!
  export default 컴포넌트명;
- 화면 띄우기
  index.js에 컴포넌트 렌더링

[엘리먼트]
- DOM 엘리먼트 가상 표현
- 불변성 = 변하지 않는 성질
  한 번 생성된 엘리먼트 변하지 않음
  생성 후 자식이나 속성 바꿀 수 없음
- 변경하는 것이 아니라 새로운 엘리먼트 생성
- 새로운 엘리먼트를 기존 엘리먼트와 바꿈
- UI 업데이트
  새로운 엘리먼트 생성 후 root.render()로 전달

[컴포넌트2]
- 모든 페이지가 컴포넌트로 구성, 하나의 컴포넌트는 또 다른 여러 컴포넌트들의 조합으로 만들 수 있음
- 반복되는 부분을 컴포넌트로 만들어 재사용
  => "재사용 가능하도록" 얼마나 컴포넌트를 잘 쪼개고 잘 조립하는지가 중요
- 자바스크립트 함수와 유사
  props를 입력으로 받아서 그에 맞는 React 엘리먼트를 생성하여 반환

[props] 
- 키-값 쌍의 형태로 컴포넌트에 전달 가능
  => "객체"
- 정수, 변수, 다른 컴포넌트 등 값을 넣을 때 {}
  문자열은 {} 생략 가능
- props로 다른 컴포넌트를 넘기는 것도 가능
- 다른 컴포넌트 넘기면서 props 넣을 수 있음
  예: header={<Header title="타이틀"/>}
- 입력 props, 출력 react element
- read-only 읽기 전용
  => 변경 불가
- 변경하려면 전달하는 데이터를 변경

[컴포넌트 만들기]
- 클래스 컴포넌트
  React 초기 버전 주로 사용
  사용 불편 -> 함수 컴포넌트 + 훅(Hook)으로 대체
- 함수 컴포넌트(권장)
  자바스크립트 함수 형태로 된 컴포넌트
  코드 간결 사용 용이
- 컴포넌트명 항상 대문자로 시작!!
  React는 소문자로 시작하는 컴포넌트를 HTML DOM Tag로 인식

[컴포넌트 추출]
- TODO

#0525
[State]
- 매우 중요, 화면이 바뀌어야 할 때 state를 변경
- 클래스 컴포넌트
- React 컴포넌트 상태
  => 변경 가능한 데이터
- 컴포넌트에서 보여줘야 하는 내용이 사용자 인터랙션에 따라 동적으로 바뀌어야 할 때 사용
- 개발자가 직접 정의해서 사용
- 렌더링과 관련된 값만 state에 포함시켜야 함
  -> 불필요한 재렌더링 발생으로 성능 저하
- 직접적으로 변경하면 안됨
  -> 값은 변경되지만 재렌더링(화면 업데이트) 안됨
- 클래스 컴포넌트(사용x)
  - 객체 형태로 존재
  - 생성자(constructor)에서 모든 state를 한 번에 정의(객체 형태로)
  - setState() 함수를 통해 state 업데이트
- 함수 컴포넌트
  - useState() Hook을 사용하여 각각의 state 정의
  - 각 state별로 주어지는 set함수 사용하여 state 값 변경

[Lifecycle]
- React 컴포넌트 생명주기
- 컴포넌트는 계속 존재하는 것이 아니라 데이터 흐름에 따라 생성되고 업데이트 되다가 사라지는 과정을 겪음
- https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/

<Mounting - 마운트(출생)>
- 컴포넌트가 생성될 때
- constructor() 호출
- render() 호출 -> 가상 DOM에 그림
- componentDidMount() 호출

<Updating - 업데이트(인생)>
- 컴포넌트가 업데이트 될 때
  -> 바뀐 부분에 대한 재렌더링이 일어날 때
- 업데이트가 일어나는 조건
  New props: 컴포넌트에 새로운 props가 전달될 때
  setState(): 함수 호출에 의해 state가 변경될 때
  forceUpdate(): 강제 업데이트 -> 쓸 일 없음
- render() 호출
- componentDidUpdate() 호출

<Unmounting - 언마운트(사망)>
- 컴포넌트가 사라질 때(화면에서 사라질 때)
  현재 컴포넌트 더 이상 화면에 표시하지 않게 될 때
- 언마운트 직전에 componentWillUnmount() 호출

[State 실습 - 클래스 컴포넌트 사용]
- 리액트 컴포넌트 상속받은 클래스 생성
  예: class 클래스명 extends React.component
    * import React  from "react";
- 매개변수가 props인 constructor() 함수
  - 부모 클래스에 props 값 전달
    super(props);
  - state 생성
    -> 변경 시: this.setState();

- 컴포넌트가 생성될 때 호출되는 메소드
  componentDidMount()
- 컴포넌트가 마운트 된 이후 호출
  componentDidMount()
- 컴포넌트가 업데이트 된 이후 호출
  componentDidUpdate()
- 컴포넌트가 언마운트 되기 전 호출
  componentWillUnmount()

- render() 함수 호출
  return 값은 엘리먼트(객체)로 반환

TODO 크롬 웹 스토어 - react developer tools

[Hook]
- 함수 컴포넌트!
- class 없이 react 기능 사용
  -> useState(), useEffect()
- react state와 생명주기 기능을 연동할 수 있게 해주는 함수
- 이름은 모두 use로 시작함

[useState]
- 가장 대포적이고 많이 사용되는 Hook
- "state를 생성하고 변경"하기 위한 Hook
- 함수 컴포넌트에서 기본적으로 state 제공하지 않음
  => useState() 사용
- 사용법
  - const [변수명, set함수명] = useState(초기값);
    예: const [count, setCount] = useState(0);
    => useState 배열로 반환되어 변수 배열 구조 분해 할당
  - 변수 각각에 대해 set함수가 따로 존재

[Quiz - 글자색 바꾸기]
- 인라인 스타일 값 !객체!
  style={{color: }}

[Quiz - 버튼 내용 바꾸기(2가지 방법)]
1. 버튼 내용 변수
  setText('마감')
  <button>{text}</button>
2. 삼항 연산자 사용 -> jsx내 if문 사용 못함
  setText(true)
  <button>{test? '마감':'신청'}</button>

[state Merge]
- set함수 비동기 함수
- 리액트는 set함수 동시에 여러 개
- 제일 마지막 set함수로 병합됨
=> state와 상관없이 새로운 값을 넣는 것이 아니면 콜백 형태로 쓸 것을 권장, 이때 콜백 함수의 첫번째 매개변수로 이전 결과(state) 받아와서 동기적으로 처리

[useEffect]
- 사이드 이펙트를 수행하기 위한 Hook
  - 사이드 이펙트: 함수의 핵심 기능과 상관없는 부가 기능
    예: '서버에서 데이터 받아오는 작업', 수동으로 DOM 변경하는 작업 등
  - 컴포넌트가 렌더링 이후에 어떤 일을 수행해야하는 지를 말함
    (effect가 수행되는 시점에 이미 DOM이 업데이트 되었음을 보장)
- '마운트/업데이트/언마운트 시 할 작업 설정'
  - 컴포넌트가 마운트 됐을 때 (처음 나타났을 때)
  - 업데이트(재렌더링) 될 때 (props 또는 state가 바뀔 때)
  - 언마운트 됐을 때 (사라질 때) 특정 작업을 처리
- 클래스 컴포넌트의 생명주기 메서드들과 동일한 기능 수행 가능
  componentDidMount()
  componentDidUpdate() 
  componentWillUnmount()
  3개를 하나로 통합해서 제공

  <사용법>
  - useEffect(콜백 함수, 의존성 배열);
  - 의존성 배열 생략 시 "매번 렌더링 될 때마다" 실행
    (마운트 + 업데이트 될 때마다 호출됨)
  - 의존성 배열 안에 있는 변수들 중 하나라도 "값이 변경되었을 때" 실행됨
    (마운트 + 값 변경에 의한 업데이트 시 호출됨)
  - 의존성 배열에 빈 배열([])을 넣으면 "화면에 처음 렌더링 될 때만" 실행
    (마운트)
  


[정리]
useEffect()를 쓰는 경우?
- useEffect() 안에 콜백 함수는 HTML 렌더링 후에 동작함
  => 연산이 오래 걸리는 작업들을 넣으면 좋음
- 아니면 주로 '처음 렌더링 시' 해줘야 하는 '초기 작업'들
1) 에러가 떠서 페이지를 백 시켜야 할 때
2) 마운트 됐을 때 그 페이지를 이용할 수 있는 사용자인지 권한 체크할 때
3) 타이머를 동작 시킬 때
4) 주로 데이터 패치 관련 작업을 많이 넣음 (주로 사용)

#0526
[useEffect()에서 리턴하는 함수]
- 언마운트 될 때 호출됨
  clean-up(정리) "함수"
- 해당 컴포넌트에서 벗어났을 때 동작하지 않도록 정리가 필요함
- 이전 작업 정리(마무리)

[useEffect Summary]
<공통사항>
- 마운트 시 무조건 실행
- return 되는 함수는 언마운트 시 무조건 실행

<의존성 배열 X>
- 렌더링 (마운트 + 업데이트) 될때마다 매번 실행
- return 함수: 마운트를 제외한 해당 effect가 실행되기 전과 언마운트 시 실행됨
  -> 실행되기 전 실행되는 이유? 이전 effect 정리

<의존성 배열 [변수, 변수, 변수,...]>
- 변수가 변할때마다 실행됨
- return 함수: 마운트를 제외한 해당 effect가 실행되기 전과 언마운트 시 실행됨
=> 배열에 변수가 여러 개: 변수들 중 하나라도 실행됨

<의존성 배열 []>
- 마운트 될때만 실행
  = 화면에 첫 렌더링 될 때만 실행
- return 함수: 언마운트 될때만 실행


[이벤트 처리하기]
- 이벤트를 처리하는 함수
  -> 이벤트 핸들러
- 카멜 케이스로 작성
  onClick
- 문자열이 아닌 함수로 전달
  onClick = {함수명}
  - 인자값이 있는 형태
    onClick = {() => {함수명(인자값)}}

[조건부 렌더링]
- 조건에 따라 렌더링의 결과가 달라지도록 하는 것
- 자바스크립트의 Truthy, Falsy
  false로 여겨지는 값 : false, 0, 빈문자, null, undefined, NaN
- 컴포넌트를 변수처럼 다룰 수 있음
  - 변수에 컴포넌트 대입
    (결과적으로 리액트 엘리먼트가 저장됨)
  - 렌더링 시 {변수}하면 됨


extension - Reactjs code snippets , simple React snippets

* snippets
rsf : react component function
usf : useState (tab)

#0530
[조건부 렌더링]
<인라인 조건, JSX 내부에서 구현>
- 논리 && 연산자로 if를 인라인으로 표현
  - return(); 안의 JSX 내에서는 if문 사용 불가
  - short-cricuit evaluation(단축평가)
  - 앞에 나온 조건이 true일 경우에만 뒤에 나오는 엘리먼트를 렌더링
    => falsy이면 여전히 && 뒤에 있는 표현식은 건너뛰지만
    falsy "표현식"이 반환된다는 것에 주의!(표현식에 따라 화면에 출력될 수도 있음)
    예: 0은 false이지만 화면에 출력됨
- 삼항 연산자로 if-else구문 인라인으로 표현
  조건에 따라 각기 다른 엘리먼트를 렌더링하고 싶을 때 사용

<컴포넌트 렌더링 막기>
- React에서는 null을 리턴하면 렌더링되지 않음
- 특정 컴포넌트를 렌더링하고 싶지 않을 경우 null을 리턴하면 됨



[정리]
- 논리 연산자(&&)와 삼항 연산자(?:)를 이용한 조건부 렌더링은 매우 많이 쓰임
-  동적인 UI를 만드는 3 step
  1. HTML/CSS로 미리 마크업/디자인 완성
  2. UI 현재 상태를 state로 저장
  3. 조건문으로 state에 따라 UI가 어떻게 보일지 작성


[리스트와 key]
- 리스트(목록): 같은 아이템을 순서대로 모아놓은 것
  리스트를 담는 자료구조 -> 배열
- key: 리스트의 아이템들을 구분하기 위한 고유한 값

<여러 개의 컴포넌트 렌더링>
- 배열을 사용하여 반복되는 여러 개의 컴포넌트 쉽게 렌더링 가능
- 컴포넌트를 코드상에 하나씩 직접 넣는 것은 비효율적
- 배열의 map() 함수를 이용
  * array.map((currentValue, index) => {return ;})
  - 기존 배열의 각 요소에 대해 한 번씩 함수를 호출하고 반환(return)하는 값으로 새로운 배열을 만듦
  - "return" 반환해줘야 보임!!!!!!!!
- 배열의 각 요소에 어떤 처리를 한 뒤 리턴하는 것으로 새로운 배열 만듦
- map() 함수 안에 있는 엘리먼트에 무조건 key가 있어야 함

<리스트의 key>
- 리스트에서 아이템들을 구분하기 위한 고유한 문자열
- 어떤 아이템이 추가, 변경, 삭제되었는지 구분하기 위해 사용
- 다양한 키 값의 사용법
  - 키가 없다면 재렌더링 시 엘리먼트를 비효율적으로 업데이트
    - 추가된 아이템뿐만 아니라 전체가 다 DOM에 업데이트 됨
    - 각 아이템에 key를 추가하지 않았기 때문에 리액트는 어떤 항목이 업데이트 됐는지 알지 못함
    - 모든 항목을 전부 업데이트 시킴
    - 고유한 값을 입력!(중복되어 구분하지 못하면 전체가 업데이트 됨)
  - 인덱스를 사용 (데이터에 고유한 id값이 없을 경우에만 사용)
    -> 아이템의 순서가 바뀔 수 있는 경우 권장 안함
  => 데이터의 id를 사용 (주로 사용)



#0531
[useRef]   \chapter7\7.6
- 레퍼런스를 사용하기 위한 Hook
  레퍼런스(참조): 특정 컴포넌트에 접근할 수 있는 객체
- 매번 렌더링 될 때마다 "항상 같은 레퍼런스 객체를 반환"
- 반환된 객체는 "컴포넌트의 전 생애주기에 걸쳐서 유지됨"
  컴포넌트가 마운트 해제(언마운트, 화면에서 사라짐) 되기 전까지 계속 유지됨
=> 1. 부득이하게 특정 DOM을 선택해야 하는 경우에만 사용
  - In JavaScript, getElementById(), querySelector() 같은 DOM Selector 함수를 사용
  - In React, useRef() Hook 사용
  - 예: 특정 엘리먼트의 크기가 필요할 때, 스크롤바 위치를 가져오거나 설정해야 될 때, 또는 input 같은 상호작용 가능한 엘리먼트에 포커스를 줘야할 때 등

=> 2. 컴포넌트 안에 변수 만들 때 사용
- 컴포넌트 안에서 조회 및 수정할 수 있는 지역 변수
- useRef로 관리하는 변수는 값이 바뀐다고 해서 컴포넌트가 재렌더링 되지 않음
- 렌더링이 될 때 값이 초기화 되지 않음
  (일반 변수로 선언 시 렌더링이 될 때마다 값이 초기화 됨)
- 사용법
  - const 변수명 = useRef(초기값);
  - 변수명.current라는 속성을 통해서 접근
    current: 현재 참조하고 있는 엘리먼트(또는 값)
    current 속성에 변경 가능한 값을 담고 있는 상자와 같음

[Form]
- 사용자로부터 입력을 받기 위해 사용하는 것(입력양식)
  대표적으로 <input>

[HTML Form]
- submit하면 저장한 URL로 요청을 보내는 기본 폼 동작을 수행
- 그러나 대부분의 경우, 자바스크립트 코드에서 사용자가 입력한 데이터에 접근하고 처리하는 것이 편리
- React에서는 이를 위해 제어 컴포넌트(controlled components)
- 사용법 
<form>
  <lable>
    <사용자로부터 입력 받가 위해 사용하는 태그>
  </lable>
</form>

[제어 컴포넌트]
- 사용자가 입력한 값에 접근하고 제어할 수 있도록 해주는 컴포넌트
- 입력값이 state를 통해 리액트의 통제를 받는 입력 폼 엘리먼트
=> 입력값이 state를 통해 관리되는 방식

* toUpperCase(): 문자열 대문자로 변경시키는 메소드

* e: 이벤트 객체 
  -> e.target.value: 이벤트가 발생한 타겟에 입력된 값
  -> e.preventDefault: 해당 이벤트의 기본 동작을 막음
    예: onSubmit 속성 -> submit 이벤트의 기본 동작은 새로고침

[다양한 Form]
<input> 태그
- value에 state 값을 가져다 넣어줌으로 항상 state 들어있는 값이 표시됨
  -> 이렇게 안하면 state에 들어가 있는 값이 아닌 타이핑한 값이 보임
- onChange 속성
  -> 이벤트가 발생한 <input>에 입력된 값 = value의 속성 값

<textarea> 태그
- 여러 줄에 걸쳐서 텍스트를 입력 받기 위한 HTML 태그
- HTML DOM 요소에서는 텍스트를 자식으로 정의했지만
  React에서는 value 속성으로 입력된 값을 관리

<select> 태그
- 드롭다운 목록을 보여주기 위한 HTML 태그
- 여러 옵션 중에서 하나 또는 여러 개를 선택할 수 있는 기능을 제공
- React, select 태그에 value 속성으로 입력된 값을 관리
  -> HTML DOM 요소,  option태그에 selected 속성 사용

<input type="file"> 태그
- 값이 읽기 전용이기 때문에 React에서는 비제어 컴포넌트가 됨

[여러 개의 입력 제어하기]
- 컴포넌트에 여러 개의 state를 선언하여 각각의 입력에 대해 사용하면 됨
- 각각의 state를 따로 선언해도 되지만 객체 형태로 한번에 관리할 수 있음
  예:
  const [name, setName] = useState('');
  const [gender, setGender] = useState('male');
  ->
  const [userInfo, setUserInfo] = useState({
    name: '',
    gender: 'male'
  });



#0601
[(참고)Input Null 값]
- 값이 비어있음을 나타낼 때 value 속성에 null 값 사용 안됨
  - 일반적으로 제어 컴포넌트에서는 빈 문자('')를 사용
  - 비제어 컴포넌트에서는 undefined 값을 사용
- DB에서 받아온 value 속성에 null 값이 있으면 기본값을 주면 됨
  예: name || ''



#0602
[state 끌어올리기]
- 여러 개의 컴포넌트들 사이에서 state를 공유하려면..?
  공통된 부모 컴포넌트로 끌어올려서 공유하는 방식

<shanred state>
- 종종 동일한 데이터에 대해 여러 컴포넌트에서 필요한 경우, 각 컴포넌트의 state에서 데이터를 각각 보관하는 것이 아니라 가장 가까운 공통된 조상 컴포넌트의 state를 공유해서 사용하는 것이 더 효율적
- 즉, 하위 컴포넌트가 공통된 상위 컴포넌트의 state를 공유하여 사용하는 것

<state 끌어올려 공유하기>
- 하위 컴포넌트의 state를 공통된 부모 컴포넌트로 끌어올려서 공유하는 방식
- 그런 다음에 하위 컴포넌트에 props로 state를 넘겨줌

* e.target.value => 문자!!

[합성 vs 상속]
- 상속 대신 합성

<합성 Composition>
- 여러 개의 컴포넌트를 합쳐서 새로운 컴포넌트를 만드는 것
- 컴포넌트들을 어떻게 조합할 것인가?
  * 용어는 몰라도 됨 => children, 범용적 사용 
  1) Containment(컴포넌트에서 다른 컴포넌트를 담기)
    - 하위 컴포넌트를 포함하는 형태
    - 어떤 자식 엘리먼트가 들어올 지 미리 예상할 수 없는 경우
    - props에 기본적으로 들어있는 children 속성을 사용
  2) Specialization(특수화)
    - 예: WelcomeDialog(구체적)는 Dialog(범용적)의 특수한 경우이다.
    - 범용적인 개념을 구별이 되게 구체화 하는 것
    - 범용적인 컴포넌트를 만들어 놓고 이를 구체화시켜서 사용
  3) 두 개를 같이 사용

  * 공통 모달창 만들 때 주로 사용

  TODO children props 이용해서 모달창

[Context]
* 실무에서는 잘 안씀
  -> Redux(전역 상태 라이브러리) useState(지역 상태)
* React 자체적으로 내부적으로 제공
- 일일이 props를 넘겨주지 않고도 컴포넌트 트리 전체에 데이터를 제공 가능하도록
- 일반적인 React 앱에서 데이터는 위에서 아래로(부모로부터 자식에게) props를 통해 전달되지만, 앱 안의 여러 컴포넌트들에 전해줘야 하는 props의 경우 이 과정이 번거로울 수 있음
- 예: Locale(언어) 정보, UI 테마, 로그인 유저 정보, 앱 환경설정
- context를 이용하면, 트리 단계마다 명시적으로 props를 넘겨주지 않아도 많은 컴포넌트가 이러한 값을 공유하도록 할 수 있음
- How? Broadcast!
- When?
  - React 컴포넌트 트리 안에서 전역(global) 데이터를 공유할 수 있도록 고안된 방법
    -> 전역 데이터로는 현재 로그인한 유저, 테마, 선호하는 언어 등
  - 여러 컴포넌트에서 계속해서 접근이 일어날 수 있는 데이터들이 있는 경우

  [Context API]
  1) React.createContext(defaultValue)
    - 컨텍스트를 생성하기 위한 함수
    - 컨텍스트 객체를 리턴함
    - default: Provider를 "찾지 못했을 때만" 쓰이는 값
  2) Context.Provider
    - 모든 컨텍스트 객체는 Provider라는 컴포넌트를 갖고 있음
    - Provider 컴포넌트로 하위 컴포넌트들을 감싸주면 모든 하위 컴포넌트들이 해당 컨텍스트의 데이터에 접근 가능
    - Provider에는 value라는 prop이 있으며, 하위에 있는 컴포넌트에게 전달됨


  * Context API의 한계(단점)?
  1. 여러 개의 데이터를 전역으로 사용하려면 컨텍스트(프로바이더, 컨슈머)를 여러개 만들어야 됨
  2. value 값이 바뀌면 프로바이더의 하위 컨슈머 컴포넌트가 전부 다 재렌더링 됨
  3. Context를 사용하면 컴포넌트를 재사용하기 어려워질 수 있음

#0605
[styled-components]
-> package
- CSS 문법을 그대로 사용하면서 결과물을 스타일링 된 컴포넌트 형태로 만들어주는 라이브러리
- 컴포넌트 개념을 사용하기 때문에 리액트랑 궁합이 잘 맞음
- 백틱을 사용하여 구성 요소의 스타일을 지정
=> 컴포넌트 형태! 대문자로 시작!!

* 다양한 문법은 공식 문서 참고
https://styled-components.com/docs

* CSS in JS 란?
  이 문구가 뜻하는 그대로, 이 기술은 JS안에 CSS를 작성하는 것

TODO vs에서 백틱 내 CSS 색 구분 -> extension vscode-styled-components 설치 필요

* 반응형 작업
  -> 필요한 컴포넌트 내부에 작성

<ThemeProvider>

* import : 커서 -> ctrl + space

[useCallback]
=> 최적화와 관련된 Hook
- 값이 아닌 함수를 반환
- 컴포넌트 내에 함수를 정의하면 매번 렌더링이 일어날 때마다 함수가 새로 정의되므로 useCallback() Hook을 사용하여 불필요한 함수 재정의 작업을 없애는 것
- 사용법
  const 함수명 = useCallback(콜백 함수, 의존성 배열);
  의존성 배열에 들어있는 변수가 변했을 경우에만 콜백 함수를 다시 정의해서 리턴함

  -> 콜백함수, 컴포넌트가 마운트 될 때(처음 렌더링 될 때) 한번만 함수가 정의

- memoization : 자주 사용하는 것들을 메모리에 저장 후 필요할 때만 꺼내 사용

* Props로 전달해야 할 함수를 만들 때 사용해본다(무조건은 아님)

(중요)
리액트에서는 기본적으로 부모 컴포넌트가 랜더링되면 모든 자식 컴포넌트들도 무조건 렌더링 된다!
이 때 React.memo()를 사용하면 자식 컴포넌드에서 props의 변경이 없을 경우 렌더링을 막아준다. (props의 변경이 있으면 당연히 렌더링되어야 함)
